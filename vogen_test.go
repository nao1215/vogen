// Package vogen provides a code generator for Value Objects in Go.
// Value Objects are immutable objects that represent a value.
package vogen

import (
	"errors"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestNew(t *testing.T) {
	t.Parallel()

	t.Run("error occurs when the file path is not set", func(t *testing.T) {
		t.Parallel()

		_, err := New(WithFilePath(""))
		if !errors.Is(err, ErrInvalidFilePath) {
			t.Errorf("want: %v, got: %v", ErrInvalidFilePath, err)
		}
	})

	t.Run("error occurs when the package name is not set", func(t *testing.T) {
		t.Parallel()

		_, err := New(WithPackageName(""))
		if !errors.Is(err, ErrInvalidPackageName) {
			t.Errorf("want: %v, got: %v", ErrInvalidPackageName, err)
		}
	})
}

func TestVogen_AppendValueObjects(t *testing.T) {
	t.Parallel()

	t.Run("error occurs when the StructName is not set", func(t *testing.T) {
		t.Parallel()

		gen, _ := New()
		err := gen.AppendValueObjects(ValueObject{
			StructName: "",
			Fields: []Field{
				{Name: "Name", Type: "string"},
			},
			Comments: []string{"test comment"},
		})
		if !errors.Is(err, ErrStructNameEmpty) {
			t.Errorf("want: %v, got: %v", ErrStructNameEmpty, err)
		}
	})

	t.Run("error occurs when the Field is not set", func(t *testing.T) {
		t.Parallel()

		gen, _ := New()
		err := gen.AppendValueObjects(ValueObject{
			StructName: "Person",
			Fields:     nil,
			Comments:   []string{"test comment"},
		})
		if !errors.Is(err, ErrInvalidField) {
			t.Errorf("want: %v, got: %v", ErrInvalidField, err)
		}
	})

	t.Run("error occurs when the Field 'Name' is not set", func(t *testing.T) {
		t.Parallel()

		gen, _ := New()
		err := gen.AppendValueObjects(ValueObject{
			StructName: "Person",
			Fields: []Field{
				{Name: "", Type: "string"},
			},
			Comments: []string{"test comment"},
		})
		if !errors.Is(err, ErrInvalidFieldName) {
			t.Errorf("want: %v, got: %v", ErrInvalidFieldName, err)
		}
	})

	t.Run("error occurs when the Field 'Type' is not set", func(t *testing.T) {
		t.Parallel()

		gen, _ := New()
		err := gen.AppendValueObjects(ValueObject{
			StructName: "Person",
			Fields: []Field{
				{Name: "Name", Type: ""},
			},
			Comments: []string{"test comment"},
		})
		if !errors.Is(err, ErrInvalidFieldType) {
			t.Errorf("want: %v, got: %v", ErrInvalidFieldType, err)
		}
	})
}

func TestAllValidator(t *testing.T) {
	t.Parallel()

	t.Run("NewPositiveValueValidator", func(t *testing.T) {
		t.Parallel()
		gen, err := New(
			WithFilePath(filepath.Join("testdata", "validator_output.go")),
			WithPackageName("vo_example"),
		)
		if err != nil {
			t.Fatal(err)
		}

		if err := gen.AppendValueObjects(
			ValueObject{
				StructName: "Person",
				Fields: []Field{
					{
						Name: "AllValidator",
						Type: "string",
						Validators: []Validator{
							NewPositiveValueValidator(),
							NewNegativeValueValidator(),
							NewMaxValueValidator(120),
							NewMinValueValidator(0),
							NewRangeValueValidator(0, 120),
							NewStringLengthValidator(0, 120),
						},
					},
				},
			},
		); err != nil {
			t.Fatal(err)
		}

		if err := gen.Generate(); err != nil {
			t.Fatal(err)
		}

		want := `// Code generated by vogen. DO NOT EDIT.
package vo_example

import (
	"fmt"
)

// Person represents a value object.
type Person struct {
	allValidator string
}

// NewPerson creates a new instance of Person.
func NewPerson(allValidator string) Person {
	return Person{allValidator: allValidator}
}

// NewPersonStrictly creates a new instance of Person with validation.
func NewPersonStrictly(allValidator string) (Person, error) {
	o := Person{allValidator: allValidator}
	if o.allValidator < 0 {
		return fmt.Errorf("struct 'Person' field 'AllValidator' value is negative: %d", allValidator)
	}
	if o.allValidator >= 0 {
		return fmt.Errorf("struct 'Person' field 'AllValidator' value is positive: %d", allValidator)
	}
	if o.allValidator > 120 {
		return fmt.Errorf("struct 'Person' field 'AllValidator' value exceeds the maximum value: %d", allValidator)
	}
	if o.allValidator < 0 {
		return fmt.Errorf("struct 'Person' field 'AllValidator' value is less than the minimum value: %d", allValidator)
	}
	if o.allValidator < 0 || o.allValidator > 120 {
		return fmt.Errorf("struct 'Person' field 'AllValidator' value is out of range: %d", allValidator)
	}
	if len(o.allValidator) < 0 || len(o.allValidator) > 120 {
		return fmt.Errorf("struct 'Person' field 'AllValidator' length is out of range: %d", len(o.allValidator))
	}
	return o, nil
}

// AllValidator returns the allValidator field.
func (o Person) AllValidator() string {
	return o.allValidator
}

// Equal checks if two Person objects are equal.
func (o Person) Equal(other Person) bool {
	return o.AllValidator() == other.AllValidator()
}
`

		got, err := os.ReadFile(filepath.Join("testdata", "validator_output.go"))
		if err != nil {
			t.Fatal(err)
		}

		want = strings.ReplaceAll(want, "\r\n", "\n")
		gotStr := strings.ReplaceAll(string(got), "\r\n", "\n")

		if diff := cmp.Diff(want, gotStr); diff != "" {
			t.Errorf("mismatch (-want +got):\n%s", diff)
		}
	})
}
